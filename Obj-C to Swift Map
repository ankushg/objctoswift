

Beyond those mostly syntactical conversions, you'll also need to do more semantic-based conversions:
o Handle all cases in `switch` statements (probably by adding a default case) 
o Add overrides for all superclass `init`s
o Change the definition for any variables that are only set once to `let` versus `var`
o Move getters/setters into `set/get` blocks in property definitions; in set, change name for the incoming value to `newValue`
o Biggest change is handling of nils and Optionals. Normal variables can no longer be assigned nil, only Optional ones. This should get rid of a vast array of program errors. On the other hand, all results from Cocoa methods are defined as Optionals with auto-unwrap. This means that the compile will NOT warn you that the returned values are handled incorrectly, leading to a whole new set of potential problems.
o For every property, either (a) assign initial value, or (b) add to init call or (c) make Optional by adding ? to type
o In initializers, you must set your own non-optional properties before calling super.init